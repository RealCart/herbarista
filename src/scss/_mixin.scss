@use "sass:selector";
@use "sass:math";

//REM
@function toRem($px, $current: 16) {
  $result: math.div($px, $current) + rem;
  @return $result;
}
//EM
@function em($px, $current: 16) {
  $result: math.div($px, $current) + em;
  @return $result;
}

@mixin adaptive-value(
  $property,
  $startSize,
  $minSize,
  $keepSize: 0,
  $widthFrom: $maxWidthContainer,
  $widthTo: $minWidth
) {
  @if ($startSize==0) {
    $startSize: 0.000001;
  }
  @if ($minSize==0) {
    $minSize: 0.000001;
  }

  $addSize: math.div($startSize - $minSize, 16);

  @if ($widthFrom == $maxWidthContainer and $maxWidthContainer == 0) {
    $widthFrom: $maxWidth;
  }

  $widthFromMedia: $widthFrom + "px";
  $widthToMedia: $widthTo + "px";

  // Формула плаваючого значення
  // Источник: https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
  $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
  $yIntersection: -$widthTo * $slope + $minSize;
  @if ($yIntersection==0) {
    $yIntersection: 0.000001;
  }
  $flyValue: #{$yIntersection + px} "+" #{$slope * 100}vw;

  // Отримання значення властивості
  $propertyValue: #{"clamp(" #{$minSize + px} "," $flyValue "," #{$startSize + px} ")"};
  // Якщо негативні значення
  @if ($minSize > $startSize) {
    $propertyValue: #{"clamp(" #{$startSize + px} "," $flyValue "," #{$minSize + px} ")"};
  }

  // Встановлюємо значення за замовчуванням
  @if $keepSize != 1 and $keepSize != 3 {
    @media (min-width: $widthFromMedia) {
      #{$property}: #{$startSize + px};
    }
  }
  // Адаптуємо розмір у проміжку між зазначеними ширинами в'юпорту
  @media (min-width: $widthToMedia) and (max-width: $widthFromMedia) {
    #{$property}: $propertyValue;
  }
  @if $keepSize != 1 and $keepSize != 2 {
    @media (max-width: $widthToMedia) {
      #{$property}: #{$minSize + px};
    }
  }
}

@mixin unify-parent($child) {
  @at-root #{selector.unify(&, $child)} {
    @content;
  }
}
